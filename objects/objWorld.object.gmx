<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWorld</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_number(object_index) &gt; 1) {
    instance_destroy();
    exit;
}

timeMicro = 0;
pauseDelay = 0;
pauseSurf = noone;
prevSpd = 50;

introShowed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main inputs
texture_set_interpolation(global.smoothMode);

if (global.gameStarted) {
    if (!global.gamePaused) {
        //Restarting game
        if (scrButtonPressed(global.restartButton)) {
            if (global.debugMode) {
                prevSpd = room_speed;
            }    
        
            scrRestartGame();
        }
            
        //Incrementing game time
        if (global.timeWhenDead || instance_exists(objPlayer) and room != rGameClear) {
            timeMicro += delta_time;
            global.time += timeMicro div 1000000;
            timeMicro %= 1000000;
        }
    } /*else {
        if (scrButtonHeld(global.leftButton)) {
            global.soundVolume -= 0.01;
        } else if (scrButtonHeld(global.rightButton)) {
            global.soundVolume += 0.01;
        }
        
        global.soundVolume = clamp(global.soundVolume, 0, 1);
        audio_master_gain(global.soundVolume);
    }*/

    //Pausing game
    if (pauseDelay &lt; global.totalPauseDelay) {
        pauseDelay++;
    } else if (!global.noPause &amp;&amp; scrButtonPressed(global.pauseButton)) {
        global.gamePaused = !global.gamePaused;
    
        if (global.gamePaused) {
            pauseSpr = sprite_create_from_surface(application_surface, 0, 0, display_get_gui_width(), display_get_gui_height(), false, false, 0, 0);
            instance_deactivate_all(true);
        } else {
            instance_activate_all();
            
            if (sprite_exists(pauseSpr)) {
                sprite_delete(pauseSpr);
            }
                
            scrSaveConfig();
            io_clear();
        }
        
        pauseDelay = 0;
    }
}

scrSetCaption();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Misc. input
if (!global.gamePaused) {
    //Fullscreen window
    if (scrButtonPressed(vk_f4)) {
        global.fullscreenMode = !global.fullscreenMode;
        scrSetDisplay();
        scrSaveConfig();
    }
    
    //Teleport to clear room when the game has been cleared (useful for portal rooms)
    if (global.useClearRoom &amp;&amp; global.gameStarted &amp;&amp; global.clear &amp;&amp; instance_exists(objPlayer) &amp;&amp; scrButtonPressed(global.clearButton)) {
        instance_destroy(objPlayer);
        room_goto(global.clearRoom);
    }
}

if scrButtonPressed(vk_backspace) and room = rMiku 
{
    global.saveOnBoss_Once = true;
    scrRestartGame();
    scrSaveGame(false);
    if global.practiceMode
    {
        objPlayer.x = 1669;
        objPlayer.y = 375;
    }
    else
    {
        with objPlayer { instance_destroy(); }
        with objBow { instance_destroy(); }
    }
    room_goto(rPreBoss);
}

//Resetting game
if (scrButtonPressed(vk_f2) and room != rCheckVolume and room != rTitle) {
    audio_stop_all();
    //scrUnloadAudio();
    if (global.gameStarted) 
    {
        scrRestartGame();
        scrSaveGame(false);
        global.gameStarted = false;
        global.saveOnBoss_Once = true; // Reset value
    }
    
        
    scrSaveConfig();
    if instance_exists(objPlayer)
        instance_destroy(objPlayer)
        
    room_goto(rTitle);
    instance_create(0,0,objTransitionF2);
    //game_restart();
    /*if instance_exists(objPlayer)
        instance_destroy(objPlayer)
    
    global.gameStarted = false;
    room_goto(rTitle);//*/
    
}

//Closing game
if (scrButtonPressed(vk_escape)) {
    game_end();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug inputs
if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused) {
    //Hides the debug overlay
    if (scrButtonPressed(global.debugHideButton)) {
        global.debugOverlay = !global.debugOverlay;
    }

    //Toggles god mode
    if (scrButtonPressed(global.debugGodButton)) {
        global.debugGodMode = !global.debugGodMode;
    }
    
    //Toggles infinite jump
    if (scrButtonPressed(global.debugInfButton)) {
        global.debugInfJump = !global.debugInfJump;
    }

    if (instance_exists(objPlayer)) {
        if (global.debugInfJump) {
            objPlayer.jumpsLeft = 1;
        }
        
        // Input on console the current player's position
        if (scrButtonPressed(vk_enter))
            show_debug_message("Player position: ("+string(objPlayer.x)+","+string(floor(objPlayer.y))+")");
            
        
        //Save at any given time
        if (scrButtonPressed(global.debugSaveButton)) {
            scrSaveGame(true);
            audio_play_sound(sndShoot, 0, false);
        }
        
        //Teleport to the mouse's location
        if (scrButtonPressed(global.debugMouseButton)) {
            instance_destroy(objPlayer);
            instance_create(mouse_x, mouse_y, objPlayer);
        }
    }
    
    //Go to previous room
    if (scrButtonPressed(global.debugRoomButtonD)) {
        if (room_get_name(room_previous(room)) != "rDiffs") {
            instance_destroy(objPlayer);
            room_goto_previous();
        }
    }
    
    //Go to next room
    if (scrButtonPressed(global.debugRoomButtonU)) {
        if (room_get_name(room_next(room)) != "rTemplate") {
            instance_destroy(objPlayer);
            room_goto_next();
        }
    }
    
    //Decrease room speed
    if (scrButtonHeld(global.debugSpeedButtonD)) {
        if (room_speed &gt; 1) {
            room_speed--;
        }
    }
    
    //Increase room speed
    if (scrButtonHeld(global.debugSpeedButtonU)) {
        if (room_speed &lt; 250) {
            room_speed++;
        }
    }
    
    //Reset room speed
    if (scrButtonHeld(global.debugSpeedButtonR)) {
        room_speed = 50;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kid iFrames Control
if global.hitMode
{
    global.Kid_iFrames = max(0,global.Kid_iFrames-1);
    if global.Kid_iFrames == 0
    {
        with objPlayer { image_alpha = 1; }
        with objPlayerRotation { image_alpha = 1; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var type, group;
type = ds_map_find_value(async_load, "type");
group = ds_map_find_value(async_load, "group_id");

//show_debug_message("type:" +string(type));
//show_debug_message("group_id:" +string(group));

if type = "audiogroup_load" and group = ag_BGM
{
    room_goto(rCheckVolume);
    show_debug_message("Music and SFX loaded succesfully");
    sfx_loaded = true;
    music_loaded = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_speed = prevSpd;

if (!instance_exists(objPlayMusic)) {
    scrGetMusic();
}
    
if (room == rTest) {
    with (all) {
        visible = true;
    }
}

if room == rTitle and !introShowed
{
    introShowed = true; 
    
    // Create Controllers
    if !instance_exists(objParticleManager) 
    instance_create(0,0,objParticleManager);


    if !instance_exists(objBGColorPreBoss)
    instance_create(0,0,objBGColorPreBoss);
    
    show_debug_message("Intro for the 1st time"); 
}


    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.gameStarted) {
    scrRestartGame();
    scrSaveGame(false);
}

scrSaveConfig();
scrUnloadAudio();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrInitGlobals();
pauseDelay = global.totalPauseDelay;
//room_goto(rCheckVolume);

//show_debug_message("GAME STARTED EVENT CHECK");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause overlay
if (global.gamePaused) {
    draw_sprite(pauseSpr, 0, 0, 0);

    draw_set_alpha(0.4);
    draw_set_colour(c_black);
    draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), 0);
    
    draw_set_alpha(1);
    draw_set_font(fntPause1);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    draw_text(display_get_gui_width() / 2, display_get_gui_height() / 2 - 24, "PAUSE");
    
    draw_set_font(fntPause2);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    //draw_text(20, 516, string_interp("Volume: {0}%", ceil(global.soundVolume * 100)));
    draw_text(20, 541, string_interp("Deaths: {0}", global.deaths));
    draw_text(20, 566, string_interp("Time: {0}", scrFormattedTime(global.time)));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug overlay
if (global.debugMode &amp;&amp; global.debugOverlay) {
    var spacing = 16;
    //var col = c_green;
    var col = make_colour_hsv(163,240,166);
    
    draw_set_font(fntMenu3);
    draw_set_halign(fa_right);
    draw_set_valign(fa_top);

    if (!global.gameStarted)
    {
        col = c_red;
        draw_text_colour(784, 16, "Debug Mode", c_red, c_red, c_red, c_red,1);
    }
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
        
    draw_text_colour(16, spacing * 0, string_interp("FPS: {0}", fps),col,col,col,col,1);
    draw_text_colour(16, spacing * 1, string_interp("FPS Real: {0}", fps_real),col,col,col,col,1);
    draw_text_colour(16, spacing * 2, string_interp("Instances: {0}", instance_count),col,col,col,col,1);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

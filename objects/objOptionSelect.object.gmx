<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSystem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu = 0;
select = array_repeat(0, 2);
spacing = 30;
totalOptions = 12;
totalControls = 10;
changingControls = false;
keyNames = new_array(
    "Left",
    "Right",
    "Jump",
    "Shoot",
    "Down",
    "Up",
    "Restart",
    "Pause",
    "Suicide"
);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Options descriptions
description[0] = "Adjust the Music Volume, take care of your ears buddy";
description[1] = "Adjust the Sound Effects Volume";//##Note: There's a chance to hear some SFX louder than others"
description[2] = "Toggle the Game Over music after you die";
description[3] = "You can set on Low performance if your PC is not good enough to play smoothly#Keep in mind this option will disable every background, decrease the amount#of particles and reduce some visual effects##Wouldn't recommend to set on Low performance if your PC usually runs on 50fps";
description[4] = "Everytime you pressed 'Reset Button' you'll respawn in the boss fight instead#in the hub room#Press 'backspace' if you want to go back in the hub room##Note: Autosave will apply on Practice Mode as well";
description[5] = "Adjust the timer as you want##Time: It will show you the current time of the song and his length#Percentage: It will show the percentage of the song#Off: If you don't need it because its a bit distracting, make sure to turn it OFF#you're welcome Gaborro";


description[6] = "Toggle the Fullscreen Mode";//##Note: The game isn't tested on fullscreen mode, so you could probably expect#some visual bugs";
description[7] = "V-Sync Mode##No description added";
description[8] = "Smooth Mode##No description added";
description[9] = "Set back your settings default";
description[10] = "Go here if you want to change your controls (Keyboard only)";
description[11] = "Back to main menu, every change will be saved";


//description[4] = "DMCA is now a thing on Twitch, a made an option so you could disable those#music who is not allow to stream. And everyone will be glad##ON: Music will be replaced with non copyright music#OFF: Keeps the music as it was planned";
//description[10] = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement menu after choose option menu

shiftX = 0;
shiftY = 0;
targetX = 0;
targetY = 0;
arrowTargetY = select[menu];
locked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Duplicate (commented)
/*
if ( changingControls &amp;&amp; scrButtonPressed( vk_anykey ) ) {
    var key = keyboard_key;
    
    if ( key == 160 || key == 161 ) {
        key = 16;
    }
    
    switch ( select[menu] ) {
        case 0: global.leftButton = key; break;
        case 1: global.rightButton = key; break;
        case 2: global.jumpButton = key; break;
        case 3: global.shootButton = key; break;
        case 4: global.downButton = key; break;
        case 5: global.upButton = key; break;
        case 6: global.restartButton = key; break;
        case 7: global.pauseButton = key; break;
        case 8: global.suicideButton = key; break;
    }
    
    event_user( 0 );
    scrSaveConfig();
    audio_play_sound( sndMoveSelect, 0, false );
    changingControls = false;
    exit;
}

if ( scrButtonPressed( global.menuUpButton ) ) {
    select[menu]--;
    audio_play_sound( sndMoveSelect, 0, false );
}

if ( scrButtonPressed( global.menuDownButton ) ) {
    select[menu]++;
    audio_play_sound( sndMoveSelect, 0, false );
}

if ( menu == 0 ) {
    select[menu] += totalOptions;
    select[menu] %= totalOptions;

    switch ( select[menu] ) {
        case 0: // BGM Volume
            if ( scrButtonHeld( global.menuLeftButton ) &amp;&amp; global.soundVolume &gt; 0 ) {
                global.soundVolume -= 0.01;
            } else if ( scrButtonHeld( global.menuRightButton ) &amp;&amp; global.soundVolume &lt; 1 ) {
                global.soundVolume += 0.01;
            }
            
            global.soundVolume = clamp( global.soundVolume, 0, 1 );
            audio_group_set_gain( ag_BGM, global.soundVolume, 0 );
        break;
            
        case 1: // SFX Volume
            if ( scrButtonHeld( global.menuLeftButton ) &amp;&amp; global.sfxVolume &gt; 0 ) {
                global.sfxVolume -= 0.01;
            } else if ( scrButtonHeld( global.menuRightButton ) &amp;&amp; global.sfxVolume &lt; 1 ) {
                global.sfxVolume += 0.01;
            }
            
            global.sfxVolume = clamp( global.sfxVolume, 0, 1 );
            audio_group_set_gain( ag_SFX, global.sfxVolume, 0 );
        break;
        
        case 2: // Death music
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) )
            {
                global.gameoverOption = !global.gameoverOption;
                audio_play_sound( sndMoveSelect, 0, false );
                /*if !global.gameoverOption 
                    show_debug_message( "GameOver BGM has been free from memory" ); 
                else
                    show_debug_message( "GameOver BGM has been created" );*/
 /*           }
        break;
        case 3: // Performance
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) )
            {
                global.normalPerformance = !global.normalPerformance;
                audio_play_sound( sndMoveSelect, 0, false );
                /*if global.normalPerformance
                    show_debug_message( "Background is now Enabled" );
                else
                    show_debug_message( "Background is now Disabled" );*/
 /*           }
        break;
        case 4: // Save BossRoom Option
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.saveOnBoss = !global.saveOnBoss;
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
        
        case 5: // Timer Option
            if ( scrButtonPressed( global.menuLeftButton ) ) 
            {
                audio_play_sound( sndMoveSelect, 0, false );
                global.infoTimer--;
                if global.infoTimer &lt; 0 global.infoTimer = 2;
            }
            
            if ( scrButtonPressed( global.menuRightButton ) or scrButtonPressed( global.menuAcceptButton ) ) 
            {
                audio_play_sound( sndMoveSelect, 0, false );
                global.infoTimer++;
                global.infoTimer %= 3;
            }
        break;
            
        case 6: // Fullscreen Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.fullscreenMode = !global.fullscreenMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 7: // Vsync Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.vsyncMode = !global.vsyncMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 8: // Smooth Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.smoothMode = !global.smoothMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 9: // Set Default settings
            if ( scrButtonPressed( global.menuAcceptButton ) ) {
                global.soundVolume = 1;
                global.sfxVolume = 1;
                global.gameoverOption = true;
                global.normalPerformance = true;
                global.saveOnBoss = false;
                global.infoTimer = 0;
                global.fullscreenMode = false;
                global.vsyncMode = false;
                global.smoothMode = false;
                

                // Reset volume
                audio_group_set_gain( ag_BGM, global.soundVolume, 0 );
                audio_group_set_gain( ag_SFX, global.sfxVolume, 0 );
                
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 10: // Controls settings
            if ( scrButtonPressed( global.menuAcceptButton ) ) {
                menu = 1;
                audio_play_sound( sndSelected, 0, false );
            }
            break;
            
        case 11: // Back to main menu
            if ( scrButtonPressed( global.menuAcceptButton ) ) 
            {
                scrSaveConfig();
                global.optionPreviousSelected = 2;
                audio_play_sound( sndSelected, 0, false );
                room_goto( rTitle );
            }
            break;
    }
    
    if ( scrButtonPressed( global.menuBackButton ) ) {
        scrSaveConfig();
        global.optionPreviousSelected = 2;
        audio_play_sound( sndMenuBack, 0, false );
        room_goto( rTitle );
    }
} else if ( menu == 1 ) {
    select[menu] += totalControls;
    select[menu] %= totalControls;
    
    if ( scrButtonPressed( global.menuAcceptButton ) ) {
        if ( select[menu] == totalControls - 1 ) {
            scrDefaultControls();
            event_user(0);
            scrSaveConfig();
            audio_play_sound( sndMoveSelect, 0, false );
        } else {
            changingControls = true;
            audio_play_sound( sndMoveSelect, 0, false );
        }
    }

    if ( scrButtonPressed( global.menuBackButton ) ) {
        menu = 0;
        audio_play_sound( sndMenuBack, 0, false );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( changingControls &amp;&amp; scrButtonPressed( vk_anykey ) ) {
    var key = keyboard_key;
    
    if ( key == 160 || key == 161 ) {
        key = 16;
    }
    
    switch ( select[menu] ) {
        case 0: global.leftButton = key; break;
        case 1: global.rightButton = key; break;
        case 2: global.jumpButton = key; break;
        case 3: global.shootButton = key; break;
        case 4: global.downButton = key; break;
        case 5: global.upButton = key; break;
        case 6: global.restartButton = key; break;
        case 7: global.pauseButton = key; break;
        case 8: global.suicideButton = key; break;
    }
    
    event_user( 0 );
    scrSaveConfig();
    audio_play_sound( sndMoveSelect, 0, false );
    changingControls = false;
    exit;
}

if !locked
{

if ( scrButtonPressed( global.menuUpButton ) ) {
    select[menu]--;
    audio_play_sound( sndMoveSelect, 0, false );
}

if ( scrButtonPressed( global.menuDownButton ) ) {
    select[menu]++;
    audio_play_sound( sndMoveSelect, 0, false );
}

if ( menu == 0 ) {
    select[menu] += totalOptions;
    select[menu] %= totalOptions;

    switch ( select[menu] ) {
        case 0: // BGM Volume
            if ( scrButtonHeld( global.menuLeftButton ) &amp;&amp; global.soundVolume &gt; 0 ) {
                global.soundVolume -= 0.01;
            } else if ( scrButtonHeld( global.menuRightButton ) &amp;&amp; global.soundVolume &lt; 1 ) {
                global.soundVolume += 0.01;
            }
            
            global.soundVolume = clamp( global.soundVolume, 0, 1 );
            audio_group_set_gain( ag_BGM, global.soundVolume, 0 );
        break;
            
        case 1: // SFX Volume
            if ( scrButtonHeld( global.menuLeftButton ) &amp;&amp; global.sfxVolume &gt; 0 ) {
                global.sfxVolume -= 0.01;
            } else if ( scrButtonHeld( global.menuRightButton ) &amp;&amp; global.sfxVolume &lt; 1 ) {
                global.sfxVolume += 0.01;
            }
            
            global.sfxVolume = clamp( global.sfxVolume, 0, 1 );
            audio_group_set_gain( ag_SFX, global.sfxVolume, 0 );
        break;
        
        case 2: // Death music
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) )
            {
                global.gameoverOption = !global.gameoverOption;
                audio_play_sound( sndMoveSelect, 0, false );
                /*if !global.gameoverOption 
                    show_debug_message( "GameOver BGM has been free from memory" ); 
                else
                    show_debug_message( "GameOver BGM has been created" );*/
            }
        break;
        case 3: // Performance
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) )
            {
                global.normalPerformance = !global.normalPerformance;
                audio_play_sound( sndMoveSelect, 0, false );
                /*if global.normalPerformance
                    show_debug_message( "Background is now Enabled" );
                else
                    show_debug_message( "Background is now Disabled" );*/
            }
        break;
        case 4: // Save BossRoom Option
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.saveOnBoss = !global.saveOnBoss;
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
        
        case 5: // Timer Option
            if ( scrButtonPressed( global.menuLeftButton ) ) 
            {
                audio_play_sound( sndMoveSelect, 0, false );
                global.infoTimer--;
                if global.infoTimer &lt; 0 global.infoTimer = 2;
            }
            
            if ( scrButtonPressed( global.menuRightButton ) or scrButtonPressed( global.menuAcceptButton ) ) 
            {
                audio_play_sound( sndMoveSelect, 0, false );
                global.infoTimer++;
                global.infoTimer %= 3;
            }
        break;
            
        case 6: // Fullscreen Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.fullscreenMode = !global.fullscreenMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 7: // Vsync Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.vsyncMode = !global.vsyncMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 8: // Smooth Mode
            if ( scrButtonPressed( global.menuAcceptButton ) or scrButtonPressed( global.menuLeftButton ) or scrButtonPressed(global.menuRightButton ) ) {
                global.smoothMode = !global.smoothMode;
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 9: // Set Default settings
            if ( scrButtonPressed( global.menuAcceptButton ) ) {
                global.soundVolume = 0.4;
                global.sfxVolume = 0.4;
                global.gameoverOption = true;
                global.normalPerformance = true;
                global.saveOnBoss = false;
                global.infoTimer = 0;
                global.fullscreenMode = false;
                global.vsyncMode = false;
                global.smoothMode = false;
                

                // Reset volume
                audio_group_set_gain( ag_BGM, global.soundVolume, 0 );
                audio_group_set_gain( ag_SFX, global.sfxVolume, 0 );
                
                scrSetDisplay();
                audio_play_sound( sndMoveSelect, 0, false );
            }
            break;
            
        case 10: // Controls settings
            if ( scrButtonPressed( global.menuAcceptButton ) ) {
                menu = 1;
                audio_play_sound( sndSelected, 0, false );
            }
            break;
            
        case 11: // Back to main menu
            if ( scrButtonPressed( global.menuAcceptButton ) ) 
            {
                scrSaveConfig();
                global.optionPreviousSelected = 2;
                audio_play_sound( sndSelected, 0, false );
                event_user(1);
            }
            break;
    }
    
    if ( scrButtonPressed( global.menuBackButton ) ) {
        scrSaveConfig();
        global.optionPreviousSelected = 2;
        audio_play_sound( sndMenuBack, 0, false );
        event_user(1);
    }
    
} else if ( menu == 1 ) {
    select[menu] += totalControls;
    select[menu] %= totalControls;
    
    if ( scrButtonPressed( global.menuAcceptButton ) ) {
        if ( select[menu] == totalControls - 1 ) {
            scrDefaultControls();
            event_user(0);
            scrSaveConfig();
            audio_play_sound( sndMoveSelect, 0, false );
        } else {
            changingControls = true;
            audio_play_sound( sndMoveSelect, 0, false );
        }
    }

    if ( scrButtonPressed( global.menuBackButton ) ) {
        menu = 0;
        audio_play_sound( sndMenuBack, 0, false );
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
shiftX = lerp( shiftX, targetX, 0.25 ); 
shiftY = lerp( shiftY, targetY, 0.25 ); 


arrowTargetY = lerp(arrowTargetY,select[menu],0.20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetX = -800;
targetY = 304;
locked = true;

if !instance_exists(objNeosTitleSelect)
{
    var transition = ic(320,256,objNeosTitleSelect);
        transition . shiftX = 800;
        transition . shiftY = 304;
}
else
{
    with objNeosTitleSelect
    {
        shiftX = 800;
        shiftY = 304;
        targetX = 0;
        targetY = 0;
        alarm[0] = 1;
    }
}
//room_goto( rTitle );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyBinds = new_array(
    scrGetKeybind( global.leftButton ),
    scrGetKeybind( global.rightButton ),
    scrGetKeybind( global.jumpButton ),
    scrGetKeybind( global.shootButton ),
    scrGetKeybind( global.downButton ),
    scrGetKeybind( global.upButton ),
    scrGetKeybind( global.restartButton ),
    scrGetKeybind( global.pauseButton ),
    scrGetKeybind( global.suicideButton ),
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign( fa_left );
draw_set_valign( fa_top );
draw_set_colour( c_black );
draw_set_font( fntNeosOptions2 );

var moveX = x + 96 + shiftX;
var moveY = y - 32 + 8 + shiftY;
var timerOption = "OFF";
if global.infoTimer == 1 timerOption = "Time Lenght";
if global.infoTimer == 2 timerOption = "Percentage";

if ( menu == 0 ) {


    draw_text( moveX, moveY + spacing * 0, string_interp( "BGM Volume: {0}%", ceil(global.soundVolume * 100)) );
    draw_text( moveX, moveY + spacing * 1, string_interp( "SFX Volume: {0}%", ceil(global.sfxVolume * 100)) );
    draw_text( moveX, moveY + spacing * 2, string_interp( "Death Music: {0}", cond_exp(global.gameoverOption, "ON", "OFF")) );
    draw_text( moveX, moveY + spacing * 3, string_interp( "Performance: {0}", cond_exp(global.normalPerformance, "Normal", "Low")) );
    draw_text( moveX, moveY + spacing * 4, string_interp( "AutoSave: {0}", cond_exp(global.saveOnBoss, "Enabled","Disabled")) );
    
    draw_text( moveX, moveY + spacing * 5, "Timer: " + timerOption);
    draw_text( moveX, moveY + spacing * 6, string_interp( "Fullscreen: {0}", cond_exp(global.fullscreenMode, "ON", "OFF")) );
    draw_text( moveX, moveY + spacing * 7, string_interp( "VSync: {0}", cond_exp(global.vsyncMode, "ON", "OFF")) );
    draw_text( moveX, moveY + spacing * 8, string_interp( "Smooth Mode: {0}", cond_exp(global.smoothMode, "ON", "OFF")) );
    draw_text( moveX, moveY + spacing * 9, "Reset To Defaults" );
    draw_text( moveX, moveY + spacing * 10, "Change Controls" );
    draw_text( moveX, moveY + spacing * 11, "Back To Main Menu" );
    
    /*scrDrawTextOutline( moveX, moveY + spacing * 0, string_interp( "BGM Volume: {0}%", ceil(global.soundVolume * 100)),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 1, string_interp( "SFX Volume: {0}%", ceil(global.sfxVolume * 100)),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 2, string_interp( "Death Music: {0}", cond_exp(global.gameoverOption, "ON", "OFF")),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 3, string_interp( "Performance: {0}", cond_exp(global.normalPerformance, "Normal", "Low")),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 4, string_interp( "AutoSave: {0}", cond_exp(global.saveOnBoss, "Enabled","Disabled")),c_black,c_white );
    
    scrDrawTextOutline( moveX, moveY + spacing * 5, "Timer: " + timerOption,c_black,c_white);
    scrDrawTextOutline( moveX, moveY + spacing * 6, string_interp( "Fullscreen: {0}", cond_exp(global.fullscreenMode, "ON", "OFF")),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 7, string_interp( "VSync: {0}", cond_exp(global.vsyncMode, "ON", "OFF")),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 8, string_interp( "Smooth Mode: {0}", cond_exp(global.smoothMode, "ON", "OFF")),c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 9, "Reset To Defaults",c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 10, "Change Controls",c_black,c_white );
    scrDrawTextOutline( moveX, moveY + spacing * 11, "Back To Main Menu",c_black,c_white );*/
    
    
} else if ( menu == 1 ) {
    for ( var i = 0; i &lt; totalControls - 1; i++ ) {
        var bind = keyBinds[i];
        
        if ( changingControls &amp;&amp; select[menu] == i ) {
            bind = "---";
        }
        
        draw_text( moveX, moveY + spacing * i, string_interp( "{0} Button: {1}", keyNames[i], bind ) );
    }

    draw_text( moveX, moveY + spacing * ( totalControls - 1 ), "Default Controls" );
}

//draw_sprite(sprCherry, 0, x - 44, moveY + 17 + spacing * select[menu]);
//draw_sprite(sprCherry, 0, x + 466, moveY + 17 + spacing * select[menu]);

draw_sprite_ext(sprOptionArrows, 0, 144+32+shiftX+dsin(current_time/10)*16, moveY + 14 + spacing * arrowTargetY,1,1,0,c_black,1);
draw_sprite_ext(sprOptionArrows, 0, 656-32+shiftX-dsin(current_time/10)*16, moveY + 14 + spacing * arrowTargetY,-1,1,0,c_black,1);

if menu == 0
{
    draw_set_alpha( 0.8 );
    draw_rectangle_colour( 16 + shiftX, 384 + 8 + shiftY, 784 + shiftX, 560 + 8 + shiftY, c_black,c_black,c_black,c_black, false );
    draw_set_alpha( 1 );
    draw_rectangle_colour( 16 + shiftX, 384 + 8 + shiftY, 784 + shiftX, 560 + 8 + shiftY, c_white,c_white,c_white,c_white, true );
    
    draw_set_font( fntNeosOptionDescription2 )
    draw_text_colour( 32 + shiftX, 400 + shiftY, description[select[menu]], c_white,c_white,c_white,c_white, 1 );
}


draw_set_halign( fa_center );
draw_set_valign( fa_top );
draw_set_font( fntMenu3 );
draw_text( 225 + shiftX, 570 + 8 + shiftY, "[Z] Back" );
draw_text( 550 + shiftX, 570 + 8 + shiftY, "[Shift] Accept" );




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
